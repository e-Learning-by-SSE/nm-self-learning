// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    USER
    ADMIN
}

model User {
    id             String           @id @default(cuid())
    name           String           @unique
    email          String?          @unique
    emailVerified  DateTime?
    image          String?
    role           UserRole         @default(USER)
    accounts       Account[]
    sessions       Session[]
    student        Student?
    author         Author?
    uploadedAssets UploadedAssets[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Student {
    userId           String            @unique
    user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    username         String            @id
    displayName      String
    enrollments      Enrollment[]
    completedLessons CompletedLesson[]
    quizAttempts     QuizAttempt[]
    learningDiary    LearningDiary?
}

model Author {
    id                  Int                   @id @default(autoincrement())
    username            String                @unique
    user                User                  @relation(fields: [username], references: [name], onDelete: Cascade)
    displayName         String
    slug                String                @unique
    imgUrl              String?
    lessons             Lesson[]
    courses             Course[]
    teams               Team[]
    subjectAdmin        SubjectAdmin[]
    specializationAdmin SpecializationAdmin[]
}

model SubjectAdmin {
    subject   Subject @relation(fields: [subjectId], references: [subjectId], onDelete: Cascade)
    subjectId String
    author    Author  @relation(fields: [username], references: [username], onDelete: Cascade)
    username  String

    @@id([subjectId, username])
}

model SpecializationAdmin {
    specialization   Specialization @relation(fields: [specializationId], references: [specializationId], onDelete: Cascade)
    specializationId String
    author           Author         @relation(fields: [username], references: [username], onDelete: Cascade)
    username         String

    @@id([specializationId, username])
}

model Team {
    teamId      Int      @id @default(autoincrement())
    slug        String   @unique
    name        String
    description String?
    imgUrl      String?
    authors     Author[]
}

model Subject {
    subjectId       String           @id
    slug            String           @unique
    title           String
    subtitle        String
    imgUrlBanner    String?
    cardImgUrl      String?
    courses         Course[]
    specializations Specialization[]
    subjectAdmin    SubjectAdmin[]
}

model Specialization {
    specializationId    String                @id
    slug                String                @unique
    title               String
    subtitle            String
    imgUrlBanner        String?
    cardImgUrl          String?
    subject             Subject               @relation(fields: [subjectId], references: [subjectId], onDelete: Cascade)
    subjectId           String
    courses             Course[]
    specializationAdmin SpecializationAdmin[]
}

model Course {
    courseId        String            @id
    slug            String            @unique
    title           String
    subtitle        String
    description     String?
    imgUrl          String?
    content         Json
    meta            Json
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    enrollments     Enrollment[]
    completions     CompletedLesson[]
    subject         Subject?          @relation(fields: [subjectId], references: [subjectId])
    subjectId       String?
    specializations Specialization[]
    authors         Author[]
}

model Enrollment {
    status   EnrollmentStatus
    progress Int              @default(0)

    createdAt          DateTime  @default(now())
    lastProgressUpdate DateTime  @default(now())
    completedAt        DateTime?

    courseId String
    course   Course @relation(fields: [courseId], references: [courseId], onDelete: Cascade)

    username String
    student  Student @relation(fields: [username], references: [username], onDelete: Cascade)

    @@id([courseId, username])
}

enum EnrollmentStatus {
    ACTIVE
    INACTIVE
    COMPLETED
}

model Lesson {
    lessonId     String            @id
    slug         String            @unique
    title        String
    subtitle     String?
    description  String?
    imgUrl       String?
    content      Json
    quiz         Json?
    meta         Json
    completions  CompletedLesson[]
    quizAttempts QuizAttempt[]
    authors      Author[]
}

model CompletedLesson {
    completedLessonId Int      @id @default(autoincrement())
    courseId          String?
    course            Course?  @relation(fields: [courseId], references: [courseId])
    lessonId          String
    lesson            Lesson   @relation(fields: [lessonId], references: [lessonId], onDelete: Cascade)
    username          String
    user              Student  @relation(fields: [username], references: [username], onDelete: Cascade)
    createdAt         DateTime @default(now())

    @@index([username, lessonId])
}

model QuizAttempt {
    attemptId String   @id @default(uuid())
    createdAt DateTime @default(now())
    state     String

    student  Student @relation(fields: [username], references: [username], onDelete: Cascade)
    username String

    lesson   Lesson @relation(fields: [lessonId], references: [lessonId], onDelete: Cascade)
    lessonId String

    QuizAnswer QuizAnswer[]

    @@index([username, lessonId])
}

model QuizAnswer {
    answerId      Int         @id @default(autoincrement())
    quizAttemptId String
    quizAttempt   QuizAttempt @relation(fields: [quizAttemptId], references: [attemptId], onDelete: Cascade)
    questionId    String
    answer        Json
    isCorrect     Boolean

    @@index([questionId])
}

model LearningDiary {
    student  Student @relation(fields: [username], references: [username], onDelete: Cascade)
    username String  @id
    goals    String?
}

model UploadedAssets {
    publicUrl String   @id
    filename  String
    filetype  String
    createdAt DateTime @default(now())
    user      User?    @relation(fields: [username], references: [name], onDelete: SetNull)
    username  String?
}
