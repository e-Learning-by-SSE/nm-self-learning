generator client {
    provider        = "prisma-client-js"
    binaryTargets   = ["native", "linux-musl"]
    previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

model OllamaCredentials {
    id           String         @id @default(uuid())
    token        String
    endpointUrl  String         @unique
    OllamaModels OllamaModels[]
}

model OllamaModels {
    id                  String            @id @default(uuid())
    ollamaCredentialsId String
    ollamaCredentials   OllamaCredentials @relation(fields: [ollamaCredentialsId], references: [id])
}

model Student {
    userId                     String              @unique
    username                   String              @id
    completedLessons           CompletedLesson[]
    enrollments                Enrollment[]
    customLearningLocations    LearningLocation[]
    quizAttempts               QuizAttempt[]
    user                       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    learningDiaryEntrys        LearningDiaryPage[]
    personalLearningTechniques LearningTechnique[]
    learningTechniqueRatings   TechniqueRating[]
    learningGoals              LearningGoal[]
}

model Author {
    id                  Int                   @id @default(autoincrement())
    username            String                @unique
    displayName         String
    slug                String                @unique
    imgUrl              String?
    user                User                  @relation(fields: [username], references: [name], onDelete: Cascade)
    specializationAdmin SpecializationAdmin[]
    subjectAdmin        SubjectAdmin[]
    courses             Course[]              @relation("AuthorToCourse")
    lessons             Lesson[]              @relation("AuthorToLesson")
    teams               Team[]                @relation("AuthorToTeam")
}

model SubjectAdmin {
    subjectId String
    username  String
    subject   Subject @relation(fields: [subjectId], references: [subjectId], onDelete: Cascade)
    author    Author  @relation(fields: [username], references: [username], onDelete: Cascade)

    @@id([subjectId, username])
}

model SpecializationAdmin {
    specializationId String
    username         String
    specialization   Specialization @relation(fields: [specializationId], references: [specializationId], onDelete: Cascade)
    author           Author         @relation(fields: [username], references: [username], onDelete: Cascade)

    @@id([specializationId, username])
}

model Team {
    teamId      Int      @id @default(autoincrement())
    slug        String   @unique
    name        String
    description String?
    imgUrl      String?
    authors     Author[] @relation("AuthorToTeam")
}

model Subject {
    subjectId       String           @id
    slug            String           @unique
    title           String
    subtitle        String
    imgUrlBanner    String?
    cardImgUrl      String?
    courses         Course[]
    specializations Specialization[]
    subjectAdmin    SubjectAdmin[]
}

model Specialization {
    specializationId    String                @id
    slug                String                @unique
    title               String
    subtitle            String
    imgUrlBanner        String?
    cardImgUrl          String?
    subjectId           String
    subject             Subject               @relation(fields: [subjectId], references: [subjectId], onDelete: Cascade)
    specializationAdmin SpecializationAdmin[]
    courses             Course[]              @relation("CourseToSpecialization")
}

model Course {
    courseId             String              @id
    slug                 String              @unique
    title                String
    subtitle             String
    description          String?
    imgUrl               String?
    content              Json
    meta                 Json
    createdAt            DateTime            @default(now())
    updatedAt            DateTime            @updatedAt
    subjectId            String?
    completions          CompletedLesson[]
    subject              Subject?            @relation(fields: [subjectId], references: [subjectId])
    enrollments          Enrollment[]
    authors              Author[]            @relation("AuthorToCourse")
    specializations      Specialization[]    @relation("CourseToSpecialization")
    learningDiaryEntries LearningDiaryPage[]
}

model Enrollment {
    status             EnrollmentStatus
    progress           Int              @default(0)
    createdAt          DateTime         @default(now())
    lastProgressUpdate DateTime         @default(now())
    completedAt        DateTime?
    courseId           String
    username           String
    course             Course           @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
    student            Student          @relation(fields: [username], references: [username], onDelete: Cascade)

    @@id([courseId, username])
}

enum LessonType {
    TRADITIONAL
    SELF_REGULATED
}

model Lesson {
    lessonId              String                        @id
    slug                  String                        @unique
    title                 String
    subtitle              String?
    description           String?
    imgUrl                String?
    content               Json
    quiz                  Json?
    meta                  Json
    createdAt             DateTime                      @default(now())
    updatedAt             DateTime                      @updatedAt
    completions           CompletedLesson[]
    quizAttempts          QuizAttempt[]
    authors               Author[]                      @relation("AuthorToLesson")
    license               License?                      @relation(fields: [licenseId], references: [licenseId], onDelete: Restrict, onUpdate: Restrict)
    licenseId             Int?
    lessonType            LessonType                    @default(TRADITIONAL)
    selfRegulatedQuestion String?
    requirements          Skill[]                       @relation("requirements")
    teachingGoals         Skill[]                       @relation("teachingGoals")
    lessonStart           LearningDiaryLearnedLessons[] // TODO check if this is necessary
}

model CompletedLesson {
    completedLessonId Int      @id @default(autoincrement())
    courseId          String?
    lessonId          String
    username          String
    createdAt         DateTime @default(now())
    course            Course?  @relation(fields: [courseId], references: [courseId])
    lesson            Lesson   @relation(fields: [lessonId], references: [lessonId], onDelete: Cascade)
    user              Student  @relation(fields: [username], references: [username], onDelete: Cascade)

    @@index([username, lessonId])
}

model QuizAttempt {
    attemptId  String       @id @default(uuid())
    createdAt  DateTime     @default(now())
    state      String
    username   String
    lessonId   String
    QuizAnswer QuizAnswer[]
    lesson     Lesson       @relation(fields: [lessonId], references: [lessonId], onDelete: Cascade)
    student    Student      @relation(fields: [username], references: [username], onDelete: Cascade)

    @@index([username, lessonId])
}

model QuizAnswer {
    answerId      Int         @id @default(autoincrement())
    quizAttemptId String
    questionId    String
    answer        Json
    isCorrect     Boolean
    quizAttempt   QuizAttempt @relation(fields: [quizAttemptId], references: [attemptId], onDelete: Cascade)

    @@index([questionId])
}

// model LearningDiary {
//     username String  @id
//     goals    String?
//     student  Student @relation(fields: [username], references: [username], onDelete: Cascade)
// }

model UploadedAssets {
    objectName String   @id
    fileName   String
    fileType   String
    publicUrl  String
    createdAt  DateTime @default(now())
    username   String?
    user       User?    @relation(fields: [username], references: [name])

    @@index([fileName])
}

enum UserRole {
    USER
    ADMIN
}

enum EnrollmentStatus {
    ACTIVE
    INACTIVE
    COMPLETED
}

model License {
    licenseId         Int      @id @default(autoincrement())
    name              String
    url               String?
    licenseText       String?
    logoUrl           String?
    oerCompatible     Boolean  @default(false)
    // Specifies whether the license is default suggestion (only one should be true, otherwise the first one is used)
    defaultSuggestion Boolean  @default(false)
    // Specifies whether the license can be chosen by normal users or by admins only
    selectable        Boolean  @default(true)
    // Back reference required by Prisma -> Provides overview about usage
    lessons           Lesson[]
}

model SkillRepository {
    id          String  @id @default(cuid())
    name        String
    description String?
    skills      Skill[]
    ownerName   String
    owner       User    @relation(fields: [ownerName], references: [name])

    @@unique([ownerName, name])
    @@map("skill-repositories")
}

model Skill {
    id             String          @id @default(cuid())
    name           String
    description    String?
    repositoryId   String
    repository     SkillRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
    children       Skill[]         @relation("parent")
    parents        Skill[]         @relation("parent")
    goalsOf        Lesson[]        @relation("teachingGoals")
    requirementsOf Lesson[]        @relation("requirements")

    @@unique([repositoryId, name])
    @@map("skills")
}

model EventLog {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    username   String
    resourceId String?
    courseId   String?
    type       String
    payload    Json?
    // @@id([userId, createdAt, action]) // todo chekc if optimization is needed
}
