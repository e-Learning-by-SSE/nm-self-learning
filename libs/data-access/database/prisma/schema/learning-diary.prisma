// in the future, we want something like this
// model LearningDiary {
//     id          String             @id @default(uuid())
//     studentName String
//     student     Student            @relation(fields: [studentName], references: [username], onDelete: Cascade)
//     pages  DiaryPage[]

//     personalLearningTechniques  LearningTechnique[]
//     learningTechniqueRatings    TechniqueRating[]
//     goals                       LearningGoal[]
// }

model LearningDiaryPage {
  id                 String                        @id @default(uuid())
  studentName        String
  student            Student                       @relation(fields: [studentName], references: [username], onDelete: Cascade)
  courseSlug         String
  course             Course                        @relation(fields: [courseSlug], references: [slug], onDelete: Cascade)
  notes              String?
  createdAt          DateTime                      @default(now())
  scope              Int                           @default(0)
  distractionLevel   Int                           @default(0)
  effortLevel        Int                           @default(0)
  learningLocationId String?
  learningLocation   LearningLocation?             @relation(fields: [learningLocationId], references: [id], onDelete: Cascade)
  learningGoals      LearningGoal[]
  techniqueRatings   TechniqueRating[]
  lessonsLearned     LearningDiaryLearnedLessons[]

  // the following values can be caluclated but are cached for performance reasons
  totalDurationLearnedMs   		Int
}

model LearningLocation {
  id                 String              @id @default(uuid())
  name               String
  iconURL            String?
  defaultLocation    Boolean             @default(false)
  creatorName        String?
  creator            Student?            @relation(fields: [creatorName], references: [username], onDelete: Cascade)
  learningDiaryEntry LearningDiaryPage[]

  @@unique(name: "unique_name_creator", fields: [name, creatorName])
}

model LearningStrategy {
  id         String              @id @default(uuid())
  name       String              @unique
  techniques LearningTechnique[]

  @@map("LearningStrategie")
}

model LearningTechnique {
  id                  String            @id @default(uuid())
  name                String
  creatorName         String?
  creator             Student?          @relation(fields: [creatorName], references: [username], onDelete: Cascade)
  defaultTechnique    Boolean           @default(false)
  learningStrategieId String
  strategy            LearningStrategy  @relation(fields: [learningStrategieId], references: [id], onDelete: Cascade)
  techniqueRatings    TechniqueRating[] // TODO check if this is necessary
}

model TechniqueRating {
  score       Int
  techniqueId String
  technique   LearningTechnique @relation(fields: [techniqueId], references: [id], onDelete: Cascade)
  diaryPageId String
  diaryPage   LearningDiaryPage @relation(fields: [diaryPageId], references: [id], onDelete: Cascade)
  creatorName String
  creator     Student           @relation(fields: [creatorName], references: [username], onDelete: Cascade)

  @@id(name: "evalId", fields: [techniqueId, diaryPageId])
}

enum LearningProgress {
  NOT_STARTED
  STARTED
  FINISHED
}

model LearningDiaryLearnedLessons {
  id        String            @id @default(uuid())
  createdAt DateTime          @default(now())
  entryId   String
  entry     LearningDiaryPage @relation(fields: [entryId], references: [id], onDelete: Cascade)
  lessonId  String
  lesson    Lesson            @relation(fields: [lessonId], references: [lessonId], onDelete: Cascade)
}

model LearningGoal {
  id                  String             @id @default(cuid())
  description         String
  status              LearningGoalStatus @default(value: INACTIVE)
  createdAt           DateTime           @default(now())
  lastProgressUpdate  DateTime?
  username            String
  student             Student            @relation(fields: [username], references: [username], onDelete: Cascade)
  learningSubGoals    LearningSubGoal[]
  LearningDiaryPage   LearningDiaryPage? @relation(fields: [learningDiaryPageId], references: [id])
  learningDiaryPageId String?
}

model LearningSubGoal {
  id                 String             @id @default(cuid())
  description        String
  status             LearningGoalStatus @default(value: INACTIVE)
  createdAt          DateTime           @default(now())
  lastProgressUpdate DateTime?
  priority           Int                @default(autoincrement())
  learningGoalId     String
  learningGoal       LearningGoal       @relation(fields: [learningGoalId], references: [id], onDelete: Cascade)
}

enum LearningGoalStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}
