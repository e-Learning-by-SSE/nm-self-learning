
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String            @id @default(cuid())
    name              String            @unique
    displayName       String
    email             String?           @unique
    emailVerified     DateTime?
    image             String?
    role              UserRole          @default(USER)
    accounts          Account[]
    author            Author?
    sessions          Session[]
    student           Student?
    uploadedAssets    UploadedAssets[]
    skillRepositories SkillRepository[]

    enabledLearningStatistics Boolean @default(false)
    enabledFeatureLearningDiary  Boolean  @default(false)
    registrationCompleted      Boolean  @default(false)

    permissions        Permission[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum AccessLevel {
    VIEW            
    EDIT            // can edit 
    FULL            // can edit and grant editing away (only on the same level)
}

model Permission {
    id          String      @id @default(uuid())
    userId      String

    subjectId   String?
    courseId    String?
    lessonId    String?

    accessLevel AccessLevel

    createdAt   DateTime    @default(now())
    expiresAt   DateTime?

    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    subject     Subject?    @relation(fields: [subjectId], references: [subjectId], onDelete: Cascade)
    course      Course?     @relation(fields: [courseId], references: [courseId], onDelete: Cascade)
    lesson      Lesson?     @relation(fields: [lessonId], references: [lessonId], onDelete: Cascade)

    // Prohibit multiple permissions per one content
    @@unique([userId, subjectId])
    @@unique([userId, courseId])
    @@unique([userId, lessonId])
}

