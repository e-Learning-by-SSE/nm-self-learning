#!/bin/bash

createEffectiveConfiguration() {
	# Creates a list of environment variables as follows:
	# 1.) Reads variables of the image
	# 2.) Adds / Overwrites vairables passed from outside
	# 3.) Save them to tmp.env and sorts them alphabetically to support comparison
	# 4.) Deletes values that are generated by each boot

	# TODO: Add grep '^prefix_' to filter for relevant variables
    # Store all OS environment variables (includes variables passed by Docker)
    env -0 | sort -z | tr '\0' '\n' > outside.env
    sed -i -e 's/=/="/;s/$/"/' outside.env
    # Automatically export defined variables, based on: https://unix.stackexchange.com/a/79077
    set -a
    # Load previously defined variables
    source .env
    # Overwrite variables with passed variables
    source outside.env
    set +a
    # Store variables (sorted to make comparison more stable)
    # TODO: Add grep '^prefix_' to filter for relevant variables
    env -0 | sort -z | tr '\0' '\n' > tmp.env

	# Delete generated system variables that are not required for the build: HOSTNAME
	sed -i '/^HOSTNAME=/d' tmp.env
}

compileOnChange() {
    # Check if any configuration parameters have been changed
    createEffectiveConfiguration
    if [ ! -f dist/.env ] || ! cmp -s tmp.env dist/.env; then
        echo "Environment was changed: Recompile app"
        rm -f .env dist/.env
        mv -f tmp.env .env
        cp .env dist/.env
        sed -i -e 's/=/="/;s/$/"/' .env

        # Next.js requires rebuild whenever DB location was changed
        npm run build
    fi

    # Clean up
    rm -f outside.env
}

# Wait until DB is running (only if a host was specified)
if [ ! -z "${DB_HOST}" ]; then
    while ! pg_isready -h $DB_HOST -p $DB_PORT &> /dev/null; do
        sleep 1
        echo "Waiting for Postgres"
    done
fi

mkdir -p dist
mkdir -p state

# Re-compiles the application whenever the environment variables have been changed
# This is required for React/NextJS applications
compileOnChange

echo "Starting SelfLearn..."
eval "npm run $@"
